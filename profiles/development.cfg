[buildout]
extends = project.cfg
	base/tools.cfg

parts +=
#    instance_demostorage
#    instance_zeo_beforestorage
#    devproducts
    omelette
    test
    paster
    i18ndude

# for threadframe:
allow-hosts +=
    *.majid.info

auto-checkout +=
    translationrecorder

# Complete, local data.fs
[instance]
debug-mode = on
verbose-security = on
products += ${devproducts:location}

# good when using the debugger:
zserver-threads = 1

eggs +=
#    threadframe
#    ipdb
    plone.reload
    Products.DocFinderTab
    Products.PDBDebugMode
    Products.PrintingMailHost
#    Products.Gloworm
    translationrecorder

zcml +=


## For translationrecorder:
#environment-vars +=
#    RECORD_TRANSLATIONS ./recorded_locales


# good for wrapping a local data.fs that you do not want to change/corrupt:
[instance_demostorage]
<= instance
demo-storage = on
demo-file-storage = demofs/Data.fs
demo-blob-storage = ${buildout:directory}/var/demoblob

# Connect to zeo server with before-storage, and a local demo-storage. This means
# you can safely connect to a production database. All changes you make is made
# locally in the demo-storage.
# Connect to the zeo server with ssh -L 8081:127.0.0.1:<zeoport> <username>@host
[instance_zeo_beforestorage]
<= instance_demostorage
before-storage = now
zeo-client = true
zeo-address = 127.0.0.1:8081
zeo-client-cache-size = 300MB
shared-blob = off


[devproducts]
recipe = plone.recipe.distros
urls =
#    http://dist.headnet.dk/DeadlockDebugger-1.0.tgz

[omelette]
recipe = collective.recipe.omelette
ignore-develop = True
eggs = ${instance:eggs}

[test]
recipe = zc.recipe.testrunner
eggs = ${buildout:eggs}


[paster]
recipe = zc.recipe.egg
eggs =
        PasteScript
        ZopeSkel
        ${instance:eggs}

[i18ndude]
unzip = true
recipe = zc.recipe.egg
eggs = i18ndude
